Milestone 2:
	Requirements:
		-User must be able to log in
		-User must be able to log out
		-User must be able to make an account
		-User must be able to delete account
		-User must be able to reset password
		-User must be able to make a server
		-User must be able to delete servers they are owners of
		-User must be able to assign roles to themselves and other users on servers they are administrators on
		-User must be able to join a server
		-User must be able to leave a server
		-User must be able to change their profile including:
			-Changing PFP
			-Changing Name
			-Changing Short Bio
			-Roles for server (if admin)
		-User must be swap between text channels for servers they are in
		-User must be able to perform CRUD operations for text channels for servers they are admins 
		-User must be able to send message for a given channel in a server, and has the potential to include:
			-Basic Text
			-Images/Files
			-Hyperlinks
		-User must receive incoming messages as they are posted
		-User must be able to view members of server
		
		
	Potential Technology Needed:
		-Authentication for users (log in system with password salting/hashing, Passport.js for Node)
			-Managing sessions for logged in users and storing current state locally (express-session)
		-Storing user information, message information, and server information (Use a database, i.e. MongoDB)
		-Real-Time Communication between other members (Pub/Sub pattern, web sockets)
		-Front End UI (Svelte, React, etc., Basic HTML/CSS/JS + Sass/TS)
		-Storing user files uploaded (images/files in messages, PFP) (CDN, Amazon S3 (cloud solution) w/ DB))
		-Back End Routing between various pages of the software (Express.js for Node, MVC architecture)
		
	Patterns listed that we should use:
		-Observer (Pub/Sub) to notify users of new messages
		-Mediator to manage communication between users/channels
		-Singleton to ensure only one instance of the server is running at any given time
		-Command to execute commands (change username/join channel, etc.)
		
		
		
